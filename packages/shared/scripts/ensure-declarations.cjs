#!/usr/bin/env node

/**
 * Ensure TypeScript declaration files are generated
 * This is a workaround for a TypeScript issue where declaration files
 * are not generated in certain environments when using .js extensions
 * in imports with module: "NodeNext"
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const distDir = path.join(__dirname, '..', 'dist');
const indexDtsPath = path.join(distDir, 'index.d.ts');

// Check if index.d.ts exists
if (!fs.existsSync(indexDtsPath)) {
  console.log('‚ö†Ô∏è  Declaration files not generated by normal build.');
  console.log('üìù Attempting alternative declaration generation...');
  
  try {
    // Try building with different settings
    console.log('   Running tsc with explicit declaration generation...');
    execSync('npx tsc --declaration --emitDeclarationOnly --outDir dist', {
      cwd: path.join(__dirname, '..'),
      stdio: 'inherit'
    });
    
    if (fs.existsSync(indexDtsPath)) {
      console.log('‚úÖ Declaration files generated successfully via fallback!');
    } else {
      // If still no declarations, try one more approach
      console.log('   Trying with allowJs and checkJs disabled...');
      execSync('npx tsc --declaration --declarationMap --outDir dist --allowJs false --checkJs false', {
        cwd: path.join(__dirname, '..'),
        stdio: 'inherit'
      });
      
      if (fs.existsSync(indexDtsPath)) {
        console.log('‚úÖ Declaration files generated successfully via second fallback!');
      } else {
        console.error('‚ùå Failed to generate declaration files after all attempts.');
        process.exit(1);
      }
    }
  } catch (error) {
    console.error('‚ùå Error during fallback declaration generation:', error.message);
    process.exit(1);
  }
} else {
  console.log('‚úÖ Declaration files already exist.');
}

// Verify all expected declaration files exist
const expectedFiles = [
  'index.d.ts',
  'factories/adapter-factory.d.ts',
  'interfaces/debug-adapter.d.ts',
  'interfaces/adapter-registry.d.ts',
  'interfaces/external-dependencies.d.ts',
  'interfaces/process-interfaces.d.ts',
  'models/index.d.ts'
];

let allFilesExist = true;
for (const file of expectedFiles) {
  const filePath = path.join(distDir, file);
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå Missing declaration file: ${file}`);
    allFilesExist = false;
  }
}

if (!allFilesExist) {
  console.error('‚ùå Some declaration files are missing!');
  process.exit(1);
}

console.log('‚úÖ All declaration files verified successfully!');
