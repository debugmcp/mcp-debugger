name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Setup Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install debugpy
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm run test:ci-no-python

  docker-publish:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: debugmcp/mcp-debugger
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  pypi-publish:
    name: Publish Python Launcher to PyPI
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Python build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine tomlkit
    
    - name: Set launcher version from tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Sync version into pyproject.toml
      run: |
        python - <<'PY'
        import os
        from tomlkit import parse, dumps
        p = os.path.join('mcp_debugger_launcher','pyproject.toml')
        with open(p,'r',encoding='utf-8') as f:
            doc = parse(f.read())
        ver = os.environ.get('VERSION','0.0.0')
        if 'project' in doc and 'version' in doc['project']:
            doc['project']['version'] = ver
        elif 'tool' in doc and 'poetry' in doc['tool'] and 'version' in doc['tool']['poetry']:
            doc['tool']['poetry']['version'] = ver
        else:
            doc.setdefault('project', {})['version'] = ver
        with open(p,'w',encoding='utf-8') as f:
            f.write(dumps(doc))
        print(f"Set pyproject version to {ver}")
        PY

    - name: Build Python package
      run: |
        cd mcp_debugger_launcher
        rm -rf dist build *.egg-info
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        cd mcp_debugger_launcher
        python -m twine check dist/*
        python -m twine upload --skip-existing dist/*

  npm-publish:
    name: Publish to npm
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Publish to npm (workspaces)
      run: |
        # Authenticate npm
        npm config set //registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}
        # Publish packages in dependency order
        npm publish -w @debugmcp/shared --access public
        npm publish -w @debugmcp/adapter-mock --access public
        npm publish -w @debugmcp/adapter-python --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    name: Create GitHub Release
    needs: [docker-publish, pypi-publish, npm-publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Grant permission to create releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Get changelog for this version
        CHANGELOG=$(sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$ d')
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release with GitHub CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create the release body in a file
        cat << 'EOF' > release_notes.md
        ## ðŸŽ‰ Release ${{ steps.changelog.outputs.VERSION }}
        
        ${{ steps.changelog.outputs.CHANGELOG }}
        
        ### ðŸ“¦ Installation
        
        **Docker:**
        ```bash
        docker pull debugmcp/mcp-debugger:${{ steps.changelog.outputs.VERSION }}
        ```
        
        **npm:**
        ```bash
        npm install -g @debugmcp/mcp-debugger@${{ steps.changelog.outputs.VERSION }}
        ```
        
        **PyPI:**
        ```bash
        pip install debug-mcp-server-launcher==${{ steps.changelog.outputs.VERSION }}
        ```
        
        ### ðŸ“š Documentation
        See the [README](https://github.com/debugmcp/mcp-debugger#readme) for usage instructions.
        EOF
        
        # Determine if this is a prerelease
        if [[ "${{ github.ref_name }}" == *"-beta"* ]] || [[ "${{ github.ref_name }}" == *"-alpha"* ]]; then
          PRERELEASE_FLAG="--prerelease"
        else
          PRERELEASE_FLAG=""
        fi
        
        # Create the release using GitHub CLI
        gh release create "${{ github.ref_name }}" \
          --title "Release ${{ steps.changelog.outputs.VERSION }}" \
          --notes-file release_notes.md \
          $PRERELEASE_FLAG
